Para todas as questões, compile-as com o gcc e execute-as via terminal.

1. Crie um "Olá mundo!" em C.
	gcc -ansi -Wall -Wextra -c Ola_mundo.c
	gcc -o prog Ola_mundo.o

2. Crie um código em C que pergunta ao usuário o seu nome, e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_1':
	gcc -c -Wall -Wextra -ansi Ola_2.c 
	gcc -o prog Ola_2.o

3. Apresente os comportamentos do código anterior nos seguintes casos:

(a) Se o usuário insere mais de um nome.
```bash
Digite o seu nome: Arnoldo Thiago
Ola Arnoldo Thiago
```

(b) Se o usuário insere mais de um nome entre aspas duplas.
```bash
Digite o seu nome: "Arnoldo Thiago"
Ola "Arnoldo Thiago"
```

(c) Se é usado um pipe.
echo Arnoldo | ./prog

```bash
Digite o seu nome: Ola Arnoldo
```

(d) Se é usado um pipe com mais de um nome.
echo Arnoldo Thiago | ./prog

```bash
Digite o seu nome: Ola Arnoldo Thiago
```

(e) Se é usado um pipe com mais de um nome entre aspas duplas.
echo "Arnoldo Thiago" | ./prog
```bash
Digite o seu nome: Ola Arnoldo Thiago
```

(f) Se é usado o redirecionamento de arquivo.
```bash
$ echo Ola mundo cruel! > ola.txt
./prog < ola.txt
Digite o seu nome: Ola Ola mundo cruel!
```

4. Crie um código em C que recebe o nome do usuário como um argumento de entrada (usando as variáveis argc e *argv[]), e imprime no terminal "Ola " e o nome do usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_2':

```bash
./prog Eu
Ola Eu
```

5. Apresente os comportamentos do código anterior nos seguintes casos:

(a) Se o usuário insere mais de um nome.
```bash
./prog Eu Mesmo
Ola Eu
```

(b) Se o usuário insere mais de um nome entre aspas duplas. Por exemplo:
```bash
./prog "Eu mesmo"
Ola Eu mesmo
```

(c) Se é usado um pipe. Por exemplo:
```bash
echo Eu | ./prog
 --------------------------------
| Insira um argumento de entrada |
| na chamada deste programa.     |
| Por exemplo:                   |
|    $ ./ola_usuario_2 Arnoldo   |
|         Ola Arnoldo            |
|    $                           |
 --------------------------------
```

(d) Se é usado um pipe com mais de um nome. Por exemplo:
```bash
echo Eu Mesmo | ./prog
 --------------------------------
| Insira um argumento de entrada |
| na chamada deste programa.     |
| Por exemplo:                   |
|    $ ./ola_usuario_2 Arnoldo   |
|         Ola Arnoldo            |
|    $                           |
 --------------------------------

```

(e) Se é usado um pipe com mais de um nome entre aspas duplas. Por exemplo:
```bash
echo "Eu mesmo" | ./prog
 --------------------------------
| Insira um argumento de entrada |
| na chamada deste programa.     |
| Por exemplo:                   |
|    $ ./ola_usuario_2 Arnoldo   |
|         Ola Arnoldo            |
|    $                           |
 --------------------------------
```

(f) Se é usado o redirecionamento de arquivo. Por exemplo:
```bash
./prog < ola.txt
 --------------------------------
| Insira um argumento de entrada |
| na chamada deste programa.     |
| Por exemplo:                   |
|    $ ./ola_usuario_2 Arnoldo   |
|         Ola Arnoldo            |
|    $                           |
 --------------------------------
```

6. Crie um código em C que faz o mesmo que o código da questão 4, e em seguida imprime no terminal quantos valores de entrada foram fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_usuario_3':

```bash
./prog Arnoldo
Ola Arnoldo
Numero de entradas = 2
```

7. Crie um código em C que imprime todos os argumentos de entrada fornecidos pelo usuário. Por exemplo, considerando que o código criado recebeu o nome de 'ola_argumentos':

```bash
./prog Arnoldo Thiago Monteiro Lima, Engenharia Eletronica
Argumentos: Arnoldo Thiago Monteiro Lima, Engenharia Eletronica 
```

8. Crie uma função que retorna a quantidade de caracteres em uma string, usando o seguinte protótipo:
`int Num_Caracs(char *string);` Salve-a em um arquivo separado chamado 'num_caracs.c'. Salve o protótipo em um arquivo chamado 'num_caracs.h'. Compile 'num_caracs.c' para gerar o objeto 'num_caracs.o'.
```bash
gcc -c -Wextra -Wall -ansi Num_Caracs.c
```

9. Re-utilize o objeto criado na questão 8 para criar um código que imprime cada argumento de entrada e a quantidade de caracteres de cada um desses argumentos. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_1':

```bash
gcc  -c -Wextra -Wall -ansi Num_Caracs.c
gcc  -c -Wextra -Wall -ansi ola_num_caracs_1.c
gcc  -o prog Num_Caracs.o ola_num_caracs_1.o
./prog Arnoldo Thiago Monteiro Lima
Argumento : ./prog / Numero de caracteres: 6
Argumento : Arnoldo / Numero de caracteres: 7
Argumento : Thiago / Numero de caracteres: 6
Argumento : Monteiro / Numero de caracteres: 8
Argumento : Lima / Numero de caracteres: 4
```

10. Crie um Makefile para a questão anterior.

11. Re-utilize o objeto criado na questão 8 para criar um código que imprime o total de caracteres nos argumentos de entrada. Por exemplo, considerando que o código criado recebeu o nome de 'ola_num_caracs_2':

```bash
gcc  -c -Wextra -Wall -ansi Num_Caracs.c
gcc  -c -Wextra -Wall -ansi ola_num_caracs_2.c
gcc  -o prog Num_Caracs.o ola_num_caracs_2.o
./prog Eu Mesmo
Total de caracteres de entrada: 13
```

12. Crie um Makefile para a questão anterior.
